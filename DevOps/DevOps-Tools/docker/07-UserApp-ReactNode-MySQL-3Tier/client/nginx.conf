server {
    listen 80;

    # ==========================
    # Server Name Configuration
    # ==========================
    # Defines which hostname this Nginx configuration will respond to.
    # If set as `_` (underscore) or `localhost`, it handles all unmatched requests.
    # In production, this should be set to your domain (e.g., example.com).
    server_name localhost;

    # ==========================
    # Serving Static Frontend Files (React/Vue/Angular)
    # ==========================
    # - Nginx serves static files directly from `/usr/share/nginx/html`.
    # - If a requested file exists (`$uri`), it is served.
    # - If not, Nginx falls back to `index.html`, allowing frontend routing.
    location / {
        root /usr/share/nginx/html;
        index index.html;
        try_files $uri /index.html;
    }

    # ==========================
    # Reverse Proxy to Backend API
    # ==========================
    # - Any request starting with `/api/` will be forwarded to the backend server.
    # - Instead of calling `http://localhost:5000/api/...`, the frontend can simply use `/api/...`.
    # - This improves security (hides backend details) and allows for better API request handling.
    location /api/ {
        proxy_pass http://server:5000;  # "server" is the backend service name (Docker container name)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # ==========================
    # Custom Error Pages
    # ==========================
    # - Defines a custom error page for HTTP 500–504 errors.
    # - Useful when backend is down, giving a better user experience.
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# ==========================
# What is a Reverse Proxy?
# ==========================
# A reverse proxy is a server that sits between clients (users) and backend servers.
# Instead of clients directly communicating with the backend, they send requests to the reverse proxy (Nginx),
# which then forwards them to the correct backend service.
#
# ✔ Benefits of a Reverse Proxy:
# - Security: Hides backend services from direct exposure to the internet.
# - Load Balancing: Can distribute traffic across multiple backend servers.
# - Caching & Compression: Can improve performance by caching responses.
# - Single Entry Point: Provides a unified access point for the frontend and backend.
#
# ==========================
# Is Nginx as a Reverse Proxy Mandatory?
# ==========================
# ❌ No, it is not mandatory.
# ✅ But it is recommended for production environments.
#
# ==========================
# What if Nginx Only Serves Static Content?
# ==========================
# If Nginx only serves static frontend files and does not act as a reverse proxy:
# 1. The frontend will still work, but API requests must use full backend URLs (e.g., `http://backend-server:5000/api/...`).
# 2. CORS issues may arise because the frontend and backend are on different origins.
# 3. Security risks increase because the backend is directly exposed.
# 4. Performance optimizations like request handling, caching, and load balancing will be missing.
#
# ==========================
# How Requests Flow
# ==========================
# 1️⃣ User requests `http://example.com/` → Nginx serves React build (`index.html`).
# 2️⃣ User requests `http://example.com/api/data` → Nginx forwards it to `server:5000`.
# 3️⃣ Backend (`server:5000`) processes API request and sends a response.
# 4️⃣ Nginx receives the response and sends it back to the frontend.
